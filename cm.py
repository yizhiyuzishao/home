# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from pyexpat import model
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
import matplotlib.pyplot as plt
from detectron2.utils.logger import setup_logger
setup_logger()
from detectron2.modeling import build_model
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.utils.visualizer import ColorMode
from detectron2.data import DatasetCatalog, MetadataCatalog
from detectron2.data.datasets.coco import load_coco_json
from Distill_GID_detectron2.GID.gid.config import add_distill_cfg
from detectron2.checkpoint.detection_checkpoint import DetectionCheckpointer
from detectron2.engine import DefaultTrainer, default_argument_parser, default_setup, hooks, launch
from PyQt5.QtGui import QPixmap
from PyQt5 import QtCore, QtGui, QtWidgets
import os
from PyQt5.QtWidgets import QWidget, QMessageBox, QApplication, QFileDialog
import cv2
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import importlib
from detectron2.evaluation.evaluator import DatasetEvaluator

class Counter(DatasetEvaluator):
  def reset(self):
    self.count = 0
  def process(self, inputs, outputs):
    for output in outputs:
      self.count += len(output["instances"])
  def evaluate(self):
    # 把self.count存起来，或者打印出来，或者返回。
    return {"count": self.count}

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 750)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.openpic = QtWidgets.QPushButton(self.centralwidget)
        self.openpic.setGeometry(QtCore.QRect(60, 100, 93, 28))
        self.openpic.setObjectName("openpic")
        self.openpic.clicked.connect(self.open_file)

        self.openfloder = QtWidgets.QPushButton(self.centralwidget)
        self.openfloder.setGeometry(QtCore.QRect(170, 100, 97, 28))
        self.openfloder.setObjectName("openfloder")
        self.openfloder.clicked.connect(self.open_floder)
        self.flpath = QtWidgets.QLabel(self.centralwidget)
        self.flpath.setGeometry(QtCore.QRect(170, 100, 0, 0))
        self.flpath.setObjectName("flpath")


        self.start = QtWidgets.QPushButton(self.centralwidget)
        self.start.setGeometry(QtCore.QRect(60, 200, 93, 28))
        self.start.clicked.connect(self.click_log)
        self.start.setObjectName("start")
        self.test = QtWidgets.QPushButton(self.centralwidget)
        self.test.setGeometry(QtCore.QRect(170, 200, 93, 28))
        self.test.clicked.connect(self.test_json)
        self.test.setObjectName("test")


        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(60, 60, 221, 21))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("res18-fpn-retinanet")
        self.comboBox.addItem("res50-fpn-retinanet")
        self.comboBox.addItem("res101-fpn-retinanet")
        self.comboBox.addItem("res101-50-fpn-retinanet")
        self.comboBox.addItem("res101-18-fpn-retinanet")

        self.cmodel = QtWidgets.QLabel(self.centralwidget)
        self.cmodel.setGeometry(QtCore.QRect(60, 30, 91, 16))
        self.cmodel.setObjectName("cmodel")


        self.result = QtWidgets.QLabel(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(60, 480, 151, 21))
        self.result.setObjectName("result")

        self.resultext = QtWidgets.QTextBrowser(self.centralwidget)
        self.resultext.setGeometry(QtCore.QRect(60, 510, 1191, 171))
        self.resultext.ensureCursorVisible()
        self.resultext.setObjectName("resultext")

        self.origin = QtWidgets.QLabel(self.centralwidget)
        self.origin.setGeometry(QtCore.QRect(300, 10, 71, 21))
        self.origin.setFrameShape(QtWidgets.QFrame.Panel)
        self.origin.setFrameShadow(QtWidgets.QFrame.Raised)
        self.origin.setLineWidth(2)
        self.origin.setObjectName("origin")
        self.path = QtWidgets.QLabel(self.centralwidget)
        self.path.setGeometry(QtCore.QRect(400, 10, 200, 21))
        self.path.setObjectName("path")

        self.last = QtWidgets.QLabel(self.centralwidget)
        self.last.setGeometry(QtCore.QRect(780, 10, 131, 21))
        self.last.setFrameShape(QtWidgets.QFrame.Panel)
        self.last.setFrameShadow(QtWidgets.QFrame.Raised)
        self.last.setLineWidth(2)
        self.last.setObjectName("last")

        self.picture1 = QtWidgets.QLabel(self.centralwidget)
        self.picture1.setGeometry(QtCore.QRect(300, 40, 461, 451))
        self.picture1.setFrameShape(QtWidgets.QFrame.Panel)
        self.picture1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.picture1.setLineWidth(1)
        self.picture1.setMidLineWidth(1)
        self.picture1.setScaledContents(True)  # 图片自适应LABEL大小
        self.picture1.setObjectName("picture1")

        self.picture2 = QtWidgets.QLabel(self.centralwidget)
        self.picture2.setGeometry(QtCore.QRect(800, 40, 461, 451))
        self.picture2.setFrameShape(QtWidgets.QFrame.Panel)
        self.picture2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.picture2.setLineWidth(1)
        self.picture2.setMidLineWidth(1)
        self.picture2.setScaledContents(True)  # 图片自适应LABEL大小
        self.picture2.setObjectName("picture2")

        self.iou = QtWidgets.QLabel(self.centralwidget)
        self.iou.setGeometry(QtCore.QRect(60, 320, 72, 15))
        self.iou.setObjectName("iou")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(60, 370, 181, 21))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        #  # 括号里为对应槽函数名
        self.horizontalSlider.setMinimum(0)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setValue(80)
        self.horizontalSlider.setTickInterval(1)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.valueChanged.connect(lambda: self.splider_change())  # 滑块的connect
        self.ioubox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.ioubox.setGeometry(QtCore.QRect(60, 340, 181, 21))
        self.ioubox.setMinimum(0)
        self.ioubox.setMaximum(1)
        self.ioubox.setValue(0.8)
        self.ioubox.valueChanged.connect(lambda: self.ioubox_change())
        self.ioubox.setObjectName("ioubox")
        self.value1 = self.ioubox.value() * 100
        self.value = self.horizontalSlider.value() * 0.01

        self.numclass = QtWidgets.QLabel(self.centralwidget)
        self.numclass.setGeometry(QtCore.QRect(60, 400, 171, 21))
        self.numclass.setScaledContents(False)
        self.numclass.setWordWrap(False)
        self.numclass.setObjectName("numclass")

        self.classbox = QtWidgets.QSpinBox(self.centralwidget)
        self.classbox.setGeometry(QtCore.QRect(60, 430, 181, 21))
        self.classbox.setObjectName("classbox")

        self.data = QtWidgets.QLabel(self.centralwidget)
        self.data.setGeometry(QtCore.QRect(60, 245, 171, 21))
        self.data.setObjectName("data")

        self.Json = QtWidgets.QComboBox(self.centralwidget)
        self.Json.setGeometry(QtCore.QRect(60, 275, 190, 25))
        self.Json.addItem("PCBTEST.json")
        self.Json.addItem("smallfault-test.json")
        self.Json.setObjectName("Json")

        self.openpkl = QtWidgets.QPushButton(self.centralwidget)
        self.openpkl.setGeometry(QtCore.QRect(60, 150, 101, 31))
        self.openpkl.clicked.connect(self.open_pth)
        self.openpkl.setObjectName("openpkl")
        self.pth = QtWidgets.QLabel(self.centralwidget)
        self.pth.setGeometry(QtCore.QRect(150, 30, 0, 0))
        self.pth.setObjectName("pth")
        self.openfl = QtWidgets.QPushButton(self.centralwidget)
        self.openfl.setGeometry(QtCore.QRect(170, 150, 101, 31))
        self.openfl.clicked.connect(self.click_fl)
        self.openfl.setObjectName("openfl")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1298, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def splider_change(self):
        value = self.horizontalSlider.value()*0.01
        self.ioubox.setValue(value)

    def ioubox_change(self):
        value1 = self.ioubox.value()*100
        self.horizontalSlider.setValue(value1)
        print(value1)

    def printf(self, mes):
        self.resultext.append(str(mes))  # 在指定的区域显示提示信息
        self.cursot = self.resultext.textCursor()
        self.resultext.moveCursor(self.cursot.End)
        QtWidgets.QApplication.processEvents()

    def open_pth(self):
        filePath, filetype = QtWidgets.QFileDialog.getOpenFileName()
        print(filePath)
        self.pth.setText(filePath)

    def open_file(self):
        filePath, filetype = QtWidgets.QFileDialog.getOpenFileName()
        print(filePath)
        pix1 = QPixmap(filePath)
        self.path.setText(filePath)
        self.picture1.setPixmap(pix1)

    def open_floder(self):
        dir_path = QtWidgets.QFileDialog.getExistingDirectory()
        print(dir_path)
        self.flpath.setText(dir_path)

    def click_fl(self):
        save_folder = '/home/ps/DiskA/project/GZY1/OUTPUT'
        cfg = get_cfg()
        im_folder = self.flpath.text() 
        value1 = self.ioubox.value()   #iou
        weight = self.pth.text()    #.pth   
        s = self.comboBox.currentText()
        nclasses = self.numclass.text()
        classes = self.classbox.value() #缺陷检测种类数
        cls = self.classbox.text()
        num = nclasses + ':' + cls
        self.resultext.append(num)
        self.resultext.append(s)    
        if s == 'res18-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res18/config/Retinanet-18.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res50-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res50/config/RetinaNet_2x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res101-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res101/config/RetinaNet_1x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res101-50-fpn-retinanet':
           cfg = add_distill_cfg(cfg)          
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_RetinaNet_T_Res101_S_Res50_2x.yaml'
           cfg.merge_from_file(yaml)
           cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
           cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
           cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
           cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
          # cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        else :
            cfg = add_distill_cfg(cfg)  
            yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_retinanet_T_res101_S_res18.yaml'
            cfg.merge_from_file(yaml)
            cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
            cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
            cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            congif = '所选的配置文件为：' + yaml
            self.resultext.append(congif)
        for im_file in os.listdir(im_folder):
            print(im_file)
            im_fl = im_folder + '/' + im_file
            print(im_fl)
            pix1 = QPixmap(im_fl)
            self.picture1.setPixmap(pix1)
            im = cv2.imread(os.path.join(im_folder,im_file))
            save_result_path = os.path.join(save_folder, im_file)
            height = im.shape[0]
            width = im.shape[1]
            dpi = 500
           # cfg = get_cfg()
           # cfg = add_distill_cfg(cfg)
            #cfg.merge_from_file(yaml)
            #cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
            #cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
            cfg.MODEL.ROI_HEADS.NMS_THRESH_TEST = 0.4
            cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  #模型阈值
            #cfg.MODEL.RETINANET.NUM_CLASSES = classes
            cfg.MODEL.ROI_HEADS.PROPOSAL_APPEND_GT = True
            model = build_model(cfg)
            print(model)
            cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, weight) 
            predictor = DefaultPredictor(cfg) 
            outsputs = predictor(im)
            pred_classes = outsputs["instances"].pred_classes
            pred_boxes = outsputs["instances"].pred_boxes
            #在原图上画出检测结果
            v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=0.5,instance_mode=ColorMode.IMAGE_BW)
            v = v.draw_instance_predictions(outsputs["instances"].to("cpu"),value1)
            plt.figure(figsize=(width/dpi, height/dpi), dpi=dpi)
            plt.axis('off')
            plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, wspace = 0)
            plt.imshow(v.get_image())
            plt.savefig(save_result_path) #保存结果
            pix2 = QPixmap(save_result_path)
            self.picture2.setPixmap(pix2)
            self.resultext.append(save_result_path)
        self.resultext.append('批量缺陷检测结果保存在以下文件夹：')
        self.resultext.append(save_result_path)


    def click_log(self):
       save_folder = '/home/ps/DiskA/project/GZY1'
       cfg = get_cfg()
       value1 = self.ioubox.value()   #iou
       weight = self.pth.text()    #.pth
       img_file = self.path.text()
       s = self.comboBox.currentText()
       nclasses = self.numclass.text()
       classes = self.classbox.value() #缺陷检测种类数
       cls = self.classbox.text()
       num = nclasses + ':' + cls
       self.resultext.append(num)
       self.resultext.append(s)
       if s == 'res18-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res18/config/Retinanet-18.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
       elif s == 'res50-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res50/config/RetinaNet_2x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
       elif s == 'res101-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res101/config/RetinaNet_1x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
       elif s == 'res101-50-fpn-retinanet':
           cfg = add_distill_cfg(cfg)          
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_RetinaNet_T_Res101_S_Res50_2x.yaml'
           cfg.merge_from_file(yaml)
           cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
           cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
           cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
           cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
          # cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
       else :
            cfg = add_distill_cfg(cfg)  
            yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_retinanet_T_res101_S_res18.yaml'
            cfg.merge_from_file(yaml)
            cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
            cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
            cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            congif = '所选的配置文件为：' + yaml
            self.resultext.append(congif)
       im = cv2.imread(img_file)
       img_file = os.path.basename(img_file)
       save_result_path = os.path.join(save_folder, img_file)
       height = im.shape[0]
       width = im.shape[1]
       dpi = 500
       #cfg = get_cfg()
      # cfg = add_distill_cfg(cfg)
       #cfg.merge_from_file(yaml)
       #cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
       #cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
       cfg.MODEL.ROI_HEADS.NMS_THRESH_TEST = 0.4
       cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  #模型阈值
      # cfg.MODEL.RETINANET.NUM_CLASSES = classes
       cfg.MODEL.ROI_HEADS.PROPOSAL_APPEND_GT = True
       model = build_model(cfg)
       print(model)
      # m = print(model)
       ui.printf(model)
       #self.resultext.append(model)
       cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR,weight)
       predictor = DefaultPredictor(cfg)
       outsputs = predictor(im)
       print(outsputs)
       pred_classes = outsputs["instances"].pred_classes
       pred_boxes = outsputs["instances"].pred_boxes
	   #在原图上画出检测结果
       v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=0.5,instance_mode=ColorMode.IMAGE_BW)
       v = v.draw_instance_predictions(outsputs["instances"].to("cpu"), value1)
       plt.figure(figsize=(width/dpi, height/dpi), dpi=dpi)
       plt.axis('off')
       plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, wspace = 0)
       plt.imshow(v.get_image())
       plt.savefig(save_result_path) #保存结果
       pix2 = QPixmap(save_result_path)
       self.picture2.setPixmap(pix2)
   
    def test_json(self):
        s = self.Json.currentText()
        if s == 'PCBTEST.json':
            DATASET_ROOT = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/datasets/PCBdataset'
            TRAIN_PATH = os.path.join(DATASET_ROOT, 'images')
            ANN_ROOT = os.path.join(DATASET_ROOT , 'Annotations')
            TRAIN_JSON = os.path.join(ANN_ROOT, 'PCBTRAIN.json')
            VAL_PATH = os.path.join(DATASET_ROOT, 'images')
            VAL_JSON = os.path.join(ANN_ROOT, 'PCBTEXT.json')
            PREDEFINED_SPLITS_DATASET = {"coco_test": (VAL_PATH, VAL_JSON),"coco_train": (TRAIN_PATH, TRAIN_JSON),}
            DatasetCatalog.register("coco_train", lambda: load_coco_json(TRAIN_JSON, TRAIN_PATH))
            MetadataCatalog.get("coco_train").set(json_file=TRAIN_JSON, image_root=TRAIN_PATH,evaluator_type="coco")
            DatasetCatalog.register("coco_val", lambda: load_coco_json(VAL_JSON, VAL_PATH))
            MetadataCatalog.get("coco_val").set(json_file=VAL_JSON, image_root=VAL_PATH,evaluator_type="coco")

        elif s == 'smallfault-test.json':
            DATASET_ROOT = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/datasets/coco'
            ANN_ROOT = os.path.join(DATASET_ROOT , 'annontations')
            TRAIN_JSON = os.path.join(ANN_ROOT, 'train2022.json')
            TRAIN_PATH = os.path.join(DATASET_ROOT, 'images')
            VAL_PATH = os.path.join(DATASET_ROOT, 'images')
            VAL_JSON = os.path.join(ANN_ROOT, 'test2022.json')
            PREDEFINED_SPLITS_DATASET = {"coco_test": (VAL_PATH, VAL_JSON),"coco_train": (TRAIN_PATH, TRAIN_JSON),}
            DatasetCatalog.register("coco_train", lambda: load_coco_json(TRAIN_JSON, TRAIN_PATH))
            MetadataCatalog.get("coco_train").set(json_file=TRAIN_JSON, image_root=TRAIN_PATH,evaluator_type="coco")
            DatasetCatalog.register("coco_val", lambda: load_coco_json(VAL_JSON, VAL_PATH))
            MetadataCatalog.get("coco_val").set(json_file=VAL_JSON, image_root=VAL_PATH,evaluator_type="coco")

        cfg = get_cfg()
        weight = self.pth.text()    #.pth
        s = self.comboBox.currentText()
        nclasses = self.numclass.text()
        classes = self.classbox.value() #缺陷检测种类数
        cls = self.classbox.text()
        num = nclasses + ':' + cls
        self.resultext.append(num)
        self.resultext.append(s)
        if s == 'res18-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res18/config/Retinanet-18.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res50-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res50/config/RetinaNet_2x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res101-fpn-retinanet':
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/RetinaNet_Res101/config/RetinaNet_1x_smooth_l1.yaml'
           cfg.merge_from_file(yaml)
           cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        elif s == 'res101-50-fpn-retinanet':
           cfg = add_distill_cfg(cfg)          
           yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_RetinaNet_T_Res101_S_Res50_2x.yaml'
           cfg.merge_from_file(yaml)
           cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
           cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
           cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
           cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
          # cfg.MODEL.RETINANET.NUM_CLASSES = classes
           congif = '所选的配置文件为：' + yaml
           self.resultext.append(congif)
        else :
            cfg = add_distill_cfg(cfg)  
            yaml = '/home/ps/DiskA/project/GZY1/Distill_GID_detectron2/GID/config/Distill_retinanet_T_res101_S_res18.yaml'
            cfg.merge_from_file(yaml)
            cfg.DISTILL.TEACHER_CFG.merge_from_file(cfg.DISTILL.TEACHER_YAML)
            cfg.DISTILL.STUDENT_CFG.merge_from_file(cfg.DISTILL.STUDENT_YAML)
            cfg.DISTILL.TEACHER_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            cfg.DISTILL.STUDENT_CFG.MODEL.RETINANET.NUM_CLASSES = classes
            congif = '所选的配置文件为：' + yaml
            self.resultext.append(congif)
        cfg.DATASETS.TEST = ("coco_val",)
        cfg.DATASETS.TRAIN = ("coco_train",)
        cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, weight)
        trainer = DefaultTrainer(cfg)
        trainer.resume_or_load(resume=True)  # resume=True means load a file cfg.OUTPUT_DIR

        DetectionCheckpointer(trainer.model).load(cfg.MODEL.WEIGHTS)
        predictor = DefaultPredictor(cfg)
        evaluator = COCOEvaluator("coco_val", cfg, False, output_dir="./output")
        val_loader = build_detection_test_loader(cfg, "coco_val")
        result1 = inference_on_dataset(trainer.model, val_loader, evaluator)
        ui.printf(result1)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.openpic.setText(_translate("MainWindow", "打开图片"))
        self.openfloder.setText(_translate("MainWindow", "打开文件夹"))
        self.start.setText(_translate("MainWindow", "开始检测"))
        self.cmodel.setText(_translate("MainWindow", "选择模型结构"))
        self.result.setText(_translate("MainWindow", "检测结果/评估日志"))
        self.origin.setText(_translate("MainWindow", "原始图片"))
        self.last.setText(_translate("MainWindow", "缺陷检测后的图片"))
        self.iou.setText(_translate("MainWindow", "置信度"))
        self.numclass.setText(_translate("MainWindow", "缺陷种类数（num_class)"))
        self.data.setText(_translate("MainWindow", "选择测试数据集"))
        self.openpkl.setText(_translate("MainWindow", "选择权重文件"))
        self.path.setText(_translate("MainWindow", " "))
        self.pth.setText(_translate("MainWindow", " "))
        self.test.setText(_translate("MainWindow", "开始测试"))
        self.openfl.setText(_translate("MainWindow", "批量缺陷检测"))
        self.flpath.setText(_translate("MainWindow", " "))





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
